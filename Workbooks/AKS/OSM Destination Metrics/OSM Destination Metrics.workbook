{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{resource}"
        ],
        "parameters": [
          {
            "id": "c3546df1-f8bf-469d-a875-76d27ba295f2",
            "version": "KqlParameterItem/1.0",
            "name": "resource",
            "type": 5,
            "isRequired": true,
            "isGlobal": true,
            "value": "",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            }
          },
          {
            "id": "7f81eecd-15a2-450d-a15f-e4f9e65d3cb2",
            "version": "KqlParameterItem/1.0",
            "name": "resourceType",
            "type": 7,
            "isRequired": true,
            "isGlobal": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{resource:resourcetype}\\\"\",\"transformers\":null}",
            "value": "microsoft.containerservice/managedclusters",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::1"
              ],
              "showDefault": false
            },
            "queryType": 8
          },
          {
            "id": "00b1f934-7128-488c-a9a5-81eb15d7e99a",
            "version": "KqlParameterItem/1.0",
            "name": "clusterId",
            "type": 1,
            "isRequired": true,
            "value": "''",
            "isHiddenWhenLocked": true
          },
          {
            "id": "c3c38502-485c-4052-b591-61db68841e58",
            "version": "KqlParameterItem/1.0",
            "name": "clusterIdWhereClause",
            "type": 1,
            "isRequired": true,
            "isGlobal": true,
            "value": "| where 'A' == 'A'",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "resourceType",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "microsoft.operationalinsights/workspaces",
                  "resultValType": "static",
                  "resultVal": "| where ClusterId =~ '{clusterId}'"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where 'A' == 'A'"
                }
              }
            ]
          },
          {
            "id": "9c5b2a8d-0b49-48cb-9124-826788b30cf4",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 3600000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ]
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "66aeeb25-4afb-48e2-871b-2b4f2225b57e",
            "version": "KqlParameterItem/1.0",
            "name": "FilterInternals",
            "label": "Filter Internals",
            "type": 2,
            "isRequired": true,
            "isGlobal": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"[\\\"<Show All>\\\", \\\"<Hide Internals>\\\"]\",\"transformers\":null}",
            "value": "<Hide Internals>",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 8
          },
          {
            "id": "49424b8e-d02d-4d2e-991e-17cd896716dc",
            "version": "KqlParameterItem/1.0",
            "name": "envoyWhereClause",
            "type": 1,
            "isRequired": true,
            "isGlobal": true,
            "value": "| where Destination !contains \"osm-controller\" and Destination !contains \"passthrough-outbound\" and Destination !contains \"envoy-\"",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "FilterInternals",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "<Hide Internals>",
                  "resultValType": "static",
                  "resultVal": "| where Destination !contains \"osm-controller\" and Destination !contains \"passthrough-outbound\" and Destination !contains \"envoy-\""
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where 'A' == 'A'"
                }
              }
            ]
          },
          {
            "id": "3f3f17c4-722a-49de-817b-f5142fbf0942",
            "version": "KqlParameterItem/1.0",
            "name": "SourceService",
            "label": " Source service",
            "type": 2,
            "isRequired": true,
            "isGlobal": true,
            "query": "InsightsMetrics\r\n| where Name contains \"envoy_cluster_upstream_cx_total\"\r\n| extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name)\r\n{envoyWhereClause}\r\n| distinct Source",
            "crossComponentResources": [
              "{resource}"
            ],
            "value": "bookstore-v1",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "{resourceType}"
          },
          {
            "id": "4d74fe5f-9009-441c-b508-68a124e485a9",
            "version": "KqlParameterItem/1.0",
            "name": "DestinationService",
            "label": "Destination service",
            "type": 2,
            "isRequired": true,
            "isGlobal": true,
            "query": "InsightsMetrics\r\n| where Name contains \"envoy_cluster_upstream_cx_total\"\r\n| extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name)\r\n{envoyWhereClause}\r\n| where Source == '{SourceService}'\r\n| distinct Destination",
            "crossComponentResources": [
              "{resource}"
            ],
            "value": "bookstore/bookstore-local",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "{resourceType}"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "{resourceType}"
      },
      "name": "pills"
    },
    {
      "type": 1,
      "content": {
        "json": "<div style=\"font-weight: 600\">\r\nSource: {SourceService}\r\n</div>"
      },
      "customWidth": "0",
      "name": "display-header",
      "styleSettings": {
        "padding": "0.5em",
        "showBorder": true
      }
    },
    {
      "type": 1,
      "content": {
        "json": ""
      },
      "name": "text - 10"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let sourceName = '{SourceService}';\r\nlet destination = '{DestinationService}';\r\nlet grain = {TimeRange:grain};\r\nlet percentileRow = (\r\n    T: \r\n    (   TimeGenerated: datetime, \r\n        Source: string, \r\n        Namespace: string, \r\n        Destination: string, \r\n        le: real, \r\n        RequestsAtLatency: int, \r\n        TotalRequests: int\r\n    ), \r\ntargetPercentile: double) { \r\n    T \r\n    | where RequestsAtLatency >= (TotalRequests * targetPercentile)\r\n    | summarize le = arg_min(le, *) by Source, Namespace, Destination, bin(TimeGenerated, grain)\r\n};\r\nlet materializedHisto = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == 'envoy_cluster_upstream_rq_time_bucket'\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name), le = tostring(parse_json(Tags).le)\r\n        | where Source == sourceName\r\n        | where Destination == destination\r\n        | extend le = iif(isnull(toreal(le)), real(+inf), toreal(le))\r\n        {envoyWhereClause}\r\n        | order by PodName, le, TimeGenerated\r\n        | serialize PrVal = next(Val), PrLe = next(le)\r\n        | project TimeGenerated, Source, Namespace, Destination, PodName, le, Val = \r\n            iif(le != PrLe, \r\n                real(null),\r\n                iif(isnull(PrVal), real(null), Val - PrVal)\r\n            )\r\n        | where isnotnull(Val)\r\n        | summarize RequestsAtLatency = sum(Val) by Source, Namespace, Destination, le, bin(TimeGenerated, grain)\r\n);\r\nlet inventoryBinned = materializedHisto\r\n| summarize TotalRequests = max(RequestsAtLatency) by Source, Namespace, Destination, bin(TimeGenerated, grain)\r\n| join (materializedHisto) on Source, Namespace, Destination, TimeGenerated\r\n| extend le = iif( isnull( toreal(le) ), real(+inf), toreal(le) ), RequestsAtLatency = toint(RequestsAtLatency), TotalRequests = toint(TotalRequests);\r\npercentileRow(inventoryBinned, 0.99)\r\n| project TimeGenerated, Source, Destination, Namespace, P99=le\r\n| join (percentileRow(inventoryBinned, 0.95)| project TimeGenerated, Source, Destination, Namespace, P95=le) on Source, Namespace, Destination, TimeGenerated\r\n| join (percentileRow(inventoryBinned, 0.50)| project TimeGenerated, Source, Destination, Namespace, P50=le) on Source, Namespace, Destination, TimeGenerated\r\n| project TimeGenerated, Source, Destination, Namespace, P99, P95, P50\r\n| make-series P99 = max(P99), P95 = max(P95), P50 = max(P50) default=0 on TimeGenerated from {TimeRange:start} + grain to {TimeRange:end} - grain step grain by Source, Destination, Namespace",
        "size": 0,
        "aggregation": 3,
        "title": "Latency",
        "noDataMessage": "No successful HTTP requests were found in this range.",
        "noDataMessageStyle": 4,
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "{resourceType}",
        "crossComponentResources": [
          "{resource}"
        ],
        "visualization": "linechart",
        "chartSettings": {
          "ySettings": {
            "numberFormatSettings": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "customWidth": "50",
      "name": "latency-chart",
      "styleSettings": {
        "maxWidth": "50%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let sourceName = '{SourceService}';\r\nlet destination = '{DestinationService}';\r\nlet grain = {TimeRange:grain};\r\nlet materializedRequestCountByCode = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == 'envoy_cluster_upstream_rq_xx'\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name), ResponseCode = tostring(parse_json(Tags).envoy_response_code_class)\r\n        | where Source == sourceName\r\n        | where Destination == destination\r\n        {envoyWhereClause}\r\n        | project TimeGenerated, Source, Namespace, Destination, ResponseCode, PodName, Val\r\n        | order by PodName, ResponseCode, TimeGenerated\r\n        | serialize PrVal = next(Val), PrResponseCode = next(ResponseCode)\r\n        | project TimeGenerated, Source, Namespace, Destination, PodName, ResponseCode, Val = \r\n            iif(ResponseCode != PrResponseCode, \r\n                real(null),\r\n                iif(isnull(PrVal), real(null), Val - PrVal)\r\n            )\r\n        | where isnotnull(Val)\r\n        | summarize Val = sum(Val) by Source, Namespace, Destination, ResponseCode, bin(TimeGenerated, grain)\r\n);\r\nlet bucketSums = materializedRequestCountByCode\r\n| summarize TotalCount = sum(Val) by Source, Namespace, Destination, bin(TimeGenerated, grain);\r\nlet failureSums = materializedRequestCountByCode\r\n| where ResponseCode != '2'\r\n| summarize FailureCount = sum(Val) by Source, Namespace, Destination, bin(TimeGenerated, grain);\r\nbucketSums\r\n| join kind=leftouter (failureSums) on Source, Namespace, Destination, TimeGenerated\r\n| extend FailureCount = iif(isnull(FailureCount), real(0), FailureCount)\r\n| project TimeGenerated, Source, Namespace, Destination, SuccessRate = (1 - (FailureCount / TotalCount)) * 100.0\r\n| make-series SuccessRate = max(SuccessRate) default=0 on TimeGenerated from {TimeRange:start}+grain to {TimeRange:end}-grain step grain by Source, Destination, Namespace",
        "size": 0,
        "aggregation": 3,
        "title": "Success rate",
        "noDataMessage": "No successful HTTP requests were found in this range.",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "{resourceType}",
        "crossComponentResources": [
          "{resource}"
        ],
        "visualization": "linechart",
        "chartSettings": {
          "yAxis": [
            "SuccessRate"
          ],
          "group": null,
          "createOtherGroup": 0,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            },
            "min": 0,
            "max": 100
          }
        }
      },
      "customWidth": "50",
      "name": "success-rate-chart",
      "styleSettings": {
        "maxWidth": "50%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let sourceName = '{SourceService}';\r\nlet destination = '{DestinationService}';\r\nlet grain = {TimeRange:grain};\r\nlet materializedRequestCountByCode = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == 'envoy_cluster_upstream_rq'\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name), ResponseCode = tostring(parse_json(Tags).envoy_response_code)\r\n        | where Source == sourceName\r\n        | where Destination == destination\r\n        {envoyWhereClause}\r\n        | project TimeGenerated, Source, Namespace, Destination, ResponseCode, PodName, Val\r\n        | order by PodName, ResponseCode, TimeGenerated\r\n        | serialize PrVal = next(Val), PrResponseCode = next(ResponseCode)\r\n        | project TimeGenerated, Source, Namespace, Destination, PodName, ResponseCode, Val = \r\n            iif(ResponseCode != PrResponseCode, \r\n                real(null),\r\n                iif(isnull(PrVal), real(null), Val - PrVal)\r\n            )\r\n        | where isnotnull(Val)\r\n        | summarize Val = sum(Val) by Source, Namespace, Destination, ResponseCode = toint(ResponseCode), TimeGenerated = bin(TimeGenerated, grain)\r\n);\r\nmaterializedRequestCountByCode\r\n| where ResponseCode > 299 and Val > 0\r\n| make-series Val = max(Val) default=0 on TimeGenerated from {TimeRange:start}+grain to {TimeRange:end}-grain step grain by tostring(ResponseCode), Source, Destination, Namespace",
        "size": 0,
        "title": "HTTP error code distribution",
        "noDataMessage": "There were no failed HTTP requests during this time window.",
        "noDataMessageStyle": 3,
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "{resourceType}",
        "crossComponentResources": [
          "{resource}"
        ],
        "visualization": "timechart",
        "chartSettings": {
          "yAxis": [
            "Val"
          ],
          "showLegend": true
        }
      },
      "customWidth": "50",
      "name": "http-error-code-distribution-chart",
      "styleSettings": {
        "maxWidth": "50%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let sourceName = '{SourceService}';\r\nlet destination = '{DestinationService}';\r\nlet grain = {TimeRange:grain};\r\nlet materializedRequestCountByCode = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == 'envoy_cluster_upstream_rq'\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name), ResponseCode = tostring(parse_json(Tags).envoy_response_code)\r\n        | where Source == sourceName\r\n        | where Destination == destination\r\n        {envoyWhereClause}\r\n        | project TimeGenerated, Source, Namespace, Destination, ResponseCode, PodName, Val\r\n        | order by PodName, ResponseCode, TimeGenerated\r\n        | serialize PrVal = next(Val), PrResponseCode = next(ResponseCode)\r\n        | project TimeGenerated, Source, Namespace, Destination, PodName, ResponseCode, Val = \r\n            iif(ResponseCode != PrResponseCode, \r\n                real(null),\r\n                iif(isnull(PrVal), real(null), Val - PrVal)\r\n            )\r\n        | where isnotnull(Val)\r\n        | summarize Val = sum(Val) by Source, Namespace, Destination, ResponseCode = toint(ResponseCode), bin(TimeGenerated, grain)\r\n);\r\nmaterializedRequestCountByCode\r\n| where (ResponseCode <= 299 and ResponseCode >= 200) and Val > 0\r\n| make-series Val = max(Val) default=0 on TimeGenerated from {TimeRange:start}+grain to {TimeRange:end}-grain step grain by tostring(ResponseCode), Source, Destination, Namespace",
        "size": 0,
        "title": "HTTP success code distribution",
        "noDataMessage": "There were no successful HTTP requests during this time window.",
        "noDataMessageStyle": 4,
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "{resourceType}",
        "crossComponentResources": [
          "{resource}"
        ],
        "visualization": "linechart",
        "chartSettings": {
          "yAxis": [
            "Val"
          ]
        }
      },
      "customWidth": "50",
      "name": "http-success-code-distribution-chart",
      "styleSettings": {
        "maxWidth": "50%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let sourceName = '{SourceService}';\r\nlet destination = '{DestinationService}';\r\nlet grain = {TimeRange:grain};\r\nlet inventory = InsightsMetrics\r\n| extend ClusterId = _ResourceId\r\n{clusterIdWhereClause}\r\n| where Name == 'envoy_cluster_upstream_rq_xx'\r\n| extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name), ResponseCode = tostring(parse_json(Tags).envoy_response_code_class)\r\n| where Source == sourceName\r\n| where Destination == destination\r\n| project TimeGenerated, Source, Namespace, Destination, ResponseCode, PodName, Val\r\n| summarize count() by PodName, bin(TimeGenerated, grain)\r\n| join (\r\n    KubePodInventory\r\n        | project TimeGenerated, Name, InstanceName = strcat(ClusterId, '/', ContainerName)\r\n        | summarize count() by InstanceName, PodName = Name, bin(TimeGenerated, grain)\r\n) on PodName, TimeGenerated\r\n| project PodName, InstanceName, TimeGenerated;\r\ninventory\r\n| join (\r\n    Perf\r\n        | where ObjectName == \"K8SContainer\"\r\n        | where CounterName == \"cpuUsageNanoCores\"\r\n        | summarize Usage = sum(CounterValue) by bin(TimeGenerated, grain), InstanceName\r\n) on InstanceName, TimeGenerated\r\n| join (\r\n    Perf\r\n        | where ObjectName == \"K8SContainer\"\r\n        | where CounterName == \"cpuLimitNanoCores\"\r\n        | summarize Limit = sum(CounterValue) by bin(TimeGenerated, grain), InstanceName\r\n) on InstanceName, TimeGenerated\r\n| summarize Usage = max(Usage), Limit = max(Limit) by TimeGenerated, PodName\r\n| project TimeGenerated, PodName, Utilization = (Usage / Limit) * 100.0\r\n| make-series Utilization = max(Utilization) default=0 on TimeGenerated from {TimeRange:start}+grain to {TimeRange:end}-grain step grain by PodName",
        "size": 0,
        "aggregation": 2,
        "title": "Source Pods CPU Usage",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "{resourceType}",
        "crossComponentResources": [
          "{resource}"
        ],
        "visualization": "timechart",
        "chartSettings": {
          "yAxis": [
            "Utilization"
          ],
          "ySettings": {
            "numberFormatSettings": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            },
            "min": 0,
            "max": 100
          }
        }
      },
      "customWidth": "50",
      "name": "source-pods-cpu-usage-chart",
      "styleSettings": {
        "maxWidth": "50%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let destination = '{DestinationService}';\r\nlet grain = {TimeRange:grain};\r\nKubePodInventory\r\n    | extend OsmCompatibleServiceName = strcat(Namespace, \"/\", ServiceName)\r\n    | where OsmCompatibleServiceName == destination\r\n    | project TimeGenerated, Name, InstanceName = strcat(ClusterId, '/', ContainerName)\r\n    | summarize count() by InstanceName, PodName = Name, bin(TimeGenerated, grain)\r\n| join (\r\n    Perf\r\n        | where ObjectName == \"K8SContainer\"\r\n        | where CounterName == \"cpuUsageNanoCores\"\r\n        | summarize Usage = sum(CounterValue) by bin(TimeGenerated, grain), InstanceName\r\n) on InstanceName, TimeGenerated\r\n| join (\r\n    Perf\r\n        | where ObjectName == \"K8SContainer\"\r\n        | where CounterName == \"cpuLimitNanoCores\"\r\n        | summarize Limit = sum(CounterValue) by bin(TimeGenerated, grain), InstanceName\r\n) on InstanceName, TimeGenerated\r\n| summarize Usage = max(Usage), Limit = max(Limit) by TimeGenerated, PodName\r\n| project TimeGenerated, PodName, Utilization = (Usage / Limit) * 100.0\r\n| make-series Utilization = max(Utilization) default=0 on TimeGenerated from {TimeRange:start}+grain to {TimeRange:end}-grain step grain by PodName",
        "size": 0,
        "aggregation": 2,
        "title": "Destination Pods CPU Usage",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "{resourceType}",
        "crossComponentResources": [
          "{resource}"
        ],
        "visualization": "timechart",
        "chartSettings": {
          "ySettings": {
            "numberFormatSettings": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            },
            "min": 0,
            "max": 100
          }
        }
      },
      "customWidth": "50",
      "name": "destination-pods-cpu-usage-chart",
      "styleSettings": {
        "maxWidth": "50%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let sourceName = '{SourceService}';\r\nlet destination = '{DestinationService}';\r\nlet grain = {TimeRange:grain};\r\nlet inventory = InsightsMetrics\r\n| extend ClusterId = _ResourceId\r\n{clusterIdWhereClause}\r\n| where Name == 'envoy_cluster_upstream_rq_xx'\r\n| extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name), ResponseCode = tostring(parse_json(Tags).envoy_response_code_class)\r\n| where Source == sourceName\r\n| where Destination == destination\r\n| project TimeGenerated, Source, Namespace, Destination, ResponseCode, PodName, Val\r\n| summarize count() by PodName, bin(TimeGenerated, grain)\r\n| join (\r\n    KubePodInventory\r\n        | project TimeGenerated, Name, InstanceName = strcat(ClusterId, '/', ContainerName)\r\n        | summarize count() by InstanceName, PodName = Name, bin(TimeGenerated, grain)\r\n) on PodName, TimeGenerated\r\n| project PodName, InstanceName, TimeGenerated;\r\ninventory\r\n| join (\r\n    Perf\r\n        | where ObjectName == \"K8SContainer\"\r\n        | where CounterName == \"memoryWorkingSetBytes\"\r\n        | summarize Usage = sum(CounterValue) by bin(TimeGenerated, grain), InstanceName\r\n) on InstanceName, TimeGenerated\r\n| join (\r\n    Perf\r\n        | where ObjectName == \"K8SContainer\"\r\n        | where CounterName == \"memoryLimitBytes\"\r\n        | summarize Limit = sum(CounterValue) by bin(TimeGenerated, grain), InstanceName\r\n) on InstanceName, TimeGenerated\r\n| summarize Usage = max(Usage), Limit = max(Limit) by TimeGenerated, PodName\r\n| project TimeGenerated, PodName, Utilization = (Usage / Limit) * 100.0\r\n| make-series Utilization = max(Utilization) default=0 on TimeGenerated from {TimeRange:start}+grain to {TimeRange:end}-grain step grain by PodName",
        "size": 0,
        "aggregation": 2,
        "title": "Source Pods Memory Usage",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "{resourceType}",
        "crossComponentResources": [
          "{resource}"
        ],
        "visualization": "timechart",
        "chartSettings": {
          "yAxis": [
            "Utilization"
          ],
          "ySettings": {
            "numberFormatSettings": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            },
            "min": 0,
            "max": 100
          }
        }
      },
      "customWidth": "50",
      "name": "source-pods-memory-usage-chart",
      "styleSettings": {
        "maxWidth": "50%"
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let destination = '{DestinationService}';\r\nlet grain = {TimeRange:grain};\r\nKubePodInventory\r\n    | extend OsmCompatibleServiceName = strcat(Namespace, \"/\", ServiceName)\r\n    | where OsmCompatibleServiceName == destination\r\n    | project TimeGenerated, Name, InstanceName = strcat(ClusterId, '/', ContainerName)\r\n    | summarize count() by InstanceName, PodName = Name, bin(TimeGenerated, grain)\r\n| join (\r\n    Perf\r\n        | where ObjectName == \"K8SContainer\"\r\n        | where CounterName == \"memoryWorkingSetBytes\"\r\n        | summarize Usage = sum(CounterValue) by bin(TimeGenerated, grain), InstanceName\r\n) on InstanceName, TimeGenerated\r\n| join (\r\n    Perf\r\n        | where ObjectName == \"K8SContainer\"\r\n        | where CounterName == \"memoryLimitBytes\"\r\n        | summarize Limit = sum(CounterValue) by bin(TimeGenerated, grain), InstanceName\r\n) on InstanceName, TimeGenerated\r\n| summarize Usage = max(Usage), Limit = max(Limit) by TimeGenerated, PodName\r\n| project TimeGenerated, PodName, Utilization = (Usage / Limit) * 100.0\r\n| make-series Utilization = max(Utilization) default=0 on TimeGenerated from {TimeRange:start}+grain to {TimeRange:end}-grain step grain by PodName",
        "size": 0,
        "aggregation": 2,
        "title": "Destination Pods Memory Usage",
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "{resourceType}",
        "crossComponentResources": [
          "{resource}"
        ],
        "visualization": "timechart",
        "chartSettings": {
          "ySettings": {
            "numberFormatSettings": {
              "unit": 1,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            },
            "min": 0,
            "max": 100
          }
        }
      },
      "customWidth": "50",
      "name": "destination-pods-memory-usage-chart",
      "styleSettings": {
        "maxWidth": "50%"
      }
    }
  ],
  "$schema": "https://github.com/woodyard/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}