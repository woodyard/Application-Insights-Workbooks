{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{resource}"
        ],
        "parameters": [
          {
            "id": "5ce072ee-a25f-4267-9403-8cb0ced97fc9",
            "version": "KqlParameterItem/1.0",
            "name": "Time_Range",
            "label": "Time range",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 3600000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "90c1a1dc-9b9a-45aa-8579-3e1cdc00006a",
            "version": "KqlParameterItem/1.0",
            "name": "filterEnvoyInternals",
            "label": "Filter Internals",
            "type": 2,
            "description": "View services that are deployed by customers. This excludes internal communication between OSM components.",
            "isRequired": true,
            "isGlobal": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"[\\\"<Show All>\\\", \\\"<Hide Internals>\\\"]\",\"transformers\":null}",
            "value": "<Hide Internals>",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 8
          },
          {
            "id": "8e661922-02c5-4778-9989-10eb4051cd3b",
            "version": "KqlParameterItem/1.0",
            "name": "envoyWhereClause",
            "type": 1,
            "isRequired": true,
            "isGlobal": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "filterEnvoyInternals",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "<Hide Internals>",
                  "resultValType": "static",
                  "resultVal": "| where Destination !contains \"osm-controller\" and Destination !contains \"passthrough-outbound\" and Destination !contains \"envoy-\""
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where \"A\" == \"A\""
                }
              }
            ]
          },
          {
            "id": "a2a8896d-ab5b-4e23-bfb9-427ca9416893",
            "version": "KqlParameterItem/1.0",
            "name": "resource",
            "type": 5,
            "isRequired": true,
            "isGlobal": true,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::1"
              ],
              "showDefault": false
            },
            "defaultValue": "value::1"
          },
          {
            "id": "8317cd5c-9d56-45b3-b4cf-d3e0e7122849",
            "version": "KqlParameterItem/1.0",
            "name": "resourceType",
            "type": 7,
            "isRequired": true,
            "isGlobal": true,
            "query": "{\"version\":\"1.0.0\",\"content\":\"\\\"{resource:resourcetype}\\\"\",\"transformers\":null}",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [
                "value::1"
              ],
              "showDefault": false
            },
            "defaultValue": "value::1",
            "queryType": 8
          },
          {
            "id": "141bf681-5e98-4aff-8061-e3b729e9bb35",
            "version": "KqlParameterItem/1.0",
            "name": "Namespace",
            "type": 2,
            "isRequired": true,
            "isGlobal": true,
            "query": "let defaultRow = dynamic({\"Namespace\":\"<All>\"});\r\nlet results = InsightsMetrics\r\n| where Name contains \"envoy_cluster_upstream_cx_total\"\r\n| extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name)\r\n{envoyWhereClause}\r\n| distinct Namespace;\r\nlet defaultRowAllNamespaces = print defaultRow\r\n| project Namespace = tostring(defaultRow.Namespace);\r\nunion defaultRowAllNamespaces, results",
            "crossComponentResources": [
              "{resource}"
            ],
            "value": "<All>",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "Time_Range",
            "queryType": 0,
            "resourceType": "{resourceType}"
          },
          {
            "id": "02fabfcd-3d7b-44ac-aa0b-3b2dc6d6a5f0",
            "version": "KqlParameterItem/1.0",
            "name": "clusterId",
            "type": 1,
            "isRequired": true,
            "isGlobal": true,
            "value": "''",
            "isHiddenWhenLocked": true
          },
          {
            "id": "54e63fb4-ba9e-43bd-ab83-e580dbf060f9",
            "version": "KqlParameterItem/1.0",
            "name": "clusterIdWhereClause",
            "type": 1,
            "isRequired": true,
            "isGlobal": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "resourceType",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "microsoft.operationalinsights/workspaces",
                  "resultValType": "static",
                  "resultVal": "| where ClusterId =~ '{clusterId}'"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "| where 'A' == 'A'"
                }
              }
            ]
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "{resourceType}"
      },
      "name": "MainInterfacePills"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "e3fcf91f-5a4e-4117-868a-b3116229c00f",
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Requests",
            "subTarget": "Requests",
            "style": "link"
          },
          {
            "id": "eaf057f2-f3cf-4640-abdb-dde09c850ea6",
            "cellValue": "TabName",
            "linkTarget": "parameter",
            "linkLabel": "Connections",
            "subTarget": "Connections",
            "style": "link"
          }
        ]
      },
      "name": "MainInterfaceTabs"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<div style=\"font-style: italic; margin-left: 2em\">Select a row below to start.</div>"
            },
            "name": "RequestsSelectMessageHeader",
            "styleSettings": {
              "margin": "15px 0 -70px 0px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let namespaceSelection = tostring('{Namespace}');\r\nlet materializedRqXX = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == \"envoy_cluster_upstream_rq_xx\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name), ResponseCode = tostring(parse_json(Tags).envoy_response_code_class)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet txUpstreamMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == \"envoy_cluster_upstream_cx_tx_bytes_total\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet rxUpstreamMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == \"envoy_cluster_upstream_cx_rx_bytes_total\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet cxTotalMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name contains \"envoy_cluster_upstream_cx_total\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet cxConnectFailedMaterialize = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name contains \"envoy_cluster_upstream_cx_connect_fail\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet cxConnectActiveMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name contains \"envoy_cluster_upstream_cx_active\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet txStart = txUpstreamMaterialized\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TxTotal_Start = sum(Val) by Source, Namespace\r\n| project Source, Namespace, TxTotal_Start;\r\nlet txEnd = txUpstreamMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TxTotal_End = sum(Val) by Source, Namespace\r\n| project Source, Namespace, TxTotal_End;\r\nlet tx = txStart\r\n| join (txEnd) on Source, Namespace\r\n| extend TxTotal = TxTotal_End - TxTotal_Start\r\n| extend TxTotal_units = tostring(TxTotal)\r\n| extend TxTotal_units = iif(TxTotal > 1024, strcat(round(TxTotal / 1024, 2), \"KB\"), TxTotal_units)\r\n| extend TxTotal_units = iif(TxTotal > 1048576, strcat(round(TxTotal / 1048576, 2), \"MB\"), TxTotal_units)\r\n| extend TxTotal_units = iif(TxTotal > 1073741824, strcat(round(TxTotal / 1073741824, 2), \"GB\"), TxTotal_units)\r\n| project Source, Namespace, TxTotal_units, TxTotal_Start, TxTotal_End;\r\nlet rxStart = rxUpstreamMaterialized\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize RxTotal_Start = sum(Val) by Source, Namespace\r\n| project Source, Namespace, RxTotal_Start;\r\nlet rxEnd = rxUpstreamMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize RxTotal_End = sum(Val) by Source, Namespace\r\n| project Source, Namespace, RxTotal_End;\r\nlet rx = rxStart\r\n| join (rxEnd) on Source, Namespace\r\n| extend RxTotal = RxTotal_End - RxTotal_Start\r\n| extend RxTotal_units = tostring(RxTotal)\r\n| extend RxTotal_units = iif(RxTotal > 1024, strcat(round(RxTotal / 1024, 2), \"KB\"), RxTotal_units)\r\n| extend RxTotal_units = iif(RxTotal > 1048576, strcat(round(RxTotal / 1048576, 2), \"MB\"), RxTotal_units)\r\n| extend RxTotal_units = iif(RxTotal > 1073741824, strcat(round(RxTotal / 1073741824, 2), \"GB\"), RxTotal_units)\r\n| project Source, Namespace, RxTotal_units, RxTotal_Start, RxTotal_End;\r\nlet connectionsStart = cxTotalMaterialized\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections = sum(Val) by Source, Namespace\r\n| project Source, Namespace, Outbound_connections_Start = TotalConnections;\r\nlet connectionsEnd = cxTotalMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections = sum(Val) by Source, Namespace\r\n| project Source, Namespace, Outbound_connections_End = TotalConnections;\r\nlet connections = connectionsStart\r\n| join (connectionsEnd) on Source, Namespace\r\n| project Source, Namespace, Outbound_connections = Outbound_connections_End - Outbound_connections_Start, Outbound_connections_Start, Outbound_connections_End;\r\nlet connectionsFailed_Start = cxConnectFailedMaterialize\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections_Start = sum(Val) by Source, Namespace\r\n| project Source, Namespace, Outbound_connections_failed_Start = TotalConnections_Start;\r\nlet connectionsFailed_End = cxConnectFailedMaterialize\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections_End = sum(Val) by Source, Namespace\r\n| project Source, Namespace, Outbound_connections_failed_End = TotalConnections_End;\r\nlet connectionsFailed = connectionsFailed_Start\r\n| join (connectionsFailed_End) on Source, Namespace\r\n| project Source, Namespace, Outbound_connections_failed = Outbound_connections_failed_End - Outbound_connections_failed_Start;\r\nlet activeConnections = cxConnectActiveMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalActiveConnections = sum(Val) by Source, Namespace\r\n| project Source, Namespace, TotalActiveConnections;\r\nlet inventoryStart = materializedRqXX\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize RqTlt = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal_Start = RqTlt, le = real(+inf);\r\nlet inventoryEnd =  materializedRqXX\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize RqTlt = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal_End = RqTlt, le = real(+inf);\r\nlet inventory = inventoryEnd\r\n| join (inventoryStart) on Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal = RqTotal_End - RqTotal_Start\r\n| where RqTotal > 0\r\n| summarize RqTotal = sum(RqTotal) by Source, Namespace\r\n| project SrcInv = Source, SrcNamespace = Namespace, RqTotal;\r\nconnections\r\n| join kind=leftouter (tx) on Source, Namespace\r\n| join kind=leftouter (rx) on Source, Namespace\r\n| join kind=leftouter (connectionsFailed) on Source, Namespace\r\n| join kind=leftouter (activeConnections) on Source, Namespace\r\n| where Outbound_connections + TotalActiveConnections > 0\r\n| join kind=fullouter (inventory) on $left.Source == $right.SrcInv, $left.Namespace == $right.SrcNamespace\r\n| extend \r\n    Source = iif(isempty(Source), SrcInv, Source), \r\n    Namespace = iif(isempty(Namespace), SrcNamespace, Namespace), \r\n    Outbound_connections = iif(isnull(Outbound_connections), real(0), Outbound_connections),\r\n    TotalActiveConnections = iif(isnull(TotalActiveConnections), real(0), TotalActiveConnections),\r\n    Outbound_connections_failed = iif(isnull(Outbound_connections_failed), real(0), Outbound_connections_failed),\r\n    TxTotal_units = iif(isempty(TxTotal_units), '0.0', strcat(TxTotal_units)),\r\n    RxTotal_units = iif(isempty(RxTotal_units), '0.0', strcat(RxTotal_units))\r\n| project RequestName = Source, RqTotal, TxTotal_units, RxTotal_units",
              "size": 3,
              "timeContext": {
                "durationMs": 3600000
              },
              "timeContextFromParameter": "Time_Range",
              "exportFieldName": "RequestName",
              "exportParameterName": "OsmNameRequests",
              "queryType": 0,
              "resourceType": "{resourceType}",
              "crossComponentResources": [
                "{resource}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "RequestName",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "RqTotal",
                    "formatter": 2
                  },
                  {
                    "columnMatch": "TxTotal_units",
                    "formatter": 2
                  },
                  {
                    "columnMatch": "RxTotal_units",
                    "formatter": 2
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "RequestName",
                    "label": "Request source"
                  },
                  {
                    "columnId": "RqTotal",
                    "label": "Http requests total"
                  },
                  {
                    "columnId": "TxTotal_units",
                    "label": "Outbound bytes sent"
                  },
                  {
                    "columnId": "RxTotal_units",
                    "label": "Outbound bytes received"
                  }
                ]
              }
            },
            "name": "RequestsMainGrid"
          },
          {
            "type": 1,
            "content": {
              "json": "---"
            },
            "conditionalVisibility": {
              "parameterName": "OsmNameRequests",
              "comparison": "isNotEqualTo"
            },
            "name": "text - 3",
            "styleSettings": {
              "padding": "4em 0 2em 0"
            }
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "<div style=\"padding-top: 20px; padding-left: 20px; font-size: 24px\">\r\n\tSource Service:\r\n\t<span style=\"font-weight: bold\">\r\n\t\t{OsmNameRequests}\r\n\t</span>\r\n</div>",
                    "style": "{OsmName}"
                  },
                  "name": "OsmNameRequest-Destinations-Header"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let sourceName = '{OsmNameRequests}';\r\nlet materializedRqXX = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == \"envoy_cluster_upstream_rq_xx\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name), ResponseCode = tostring(parse_json(Tags).envoy_response_code_class)\r\n        | where Source == sourceName\r\n        {envoyWhereClause}\r\n);\r\nlet materializedHisto = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        //{clusterIdWhereClause}\r\n        | where Name == 'envoy_cluster_upstream_rq_time_bucket'\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name), le = tostring(parse_json(Tags).le)\r\n        | where Source == sourceName\r\n        //{envoyWhereClause}\r\n);\r\nlet inventoryStart = materializedRqXX\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize RqTlt = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal_Start = RqTlt, le = real(+inf);\r\nlet inventoryEnd =  materializedRqXX\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize RqTlt = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal_End = RqTlt, le = real(+inf);\r\nlet inventory = inventoryEnd\r\n| join (inventoryStart) on Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal = RqTotal_End - RqTotal_Start\r\n| where RqTotal > 0;\r\nlet startFailures =  materializedRqXX\r\n| where ResponseCode != '2'\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize Errors = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, FailureCount_Start = Errors, le = real(+inf);\r\nlet endFailures =  materializedRqXX\r\n| where ResponseCode != '2'\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize Errors = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, FailureCount_End = Errors, le = real(+inf);\r\nlet failures = startFailures\r\n| join (endFailures) on Source, Namespace, Destination\r\n| project Source, Namespace, Destination, FailureCount = FailureCount_End - FailureCount_Start;\r\nlet startSuccess = materializedRqXX\r\n| where ResponseCode == '2'\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize Successes = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, SuccessCount_Start = Successes, le = real(+inf);\r\nlet endSuccess =  materializedRqXX\r\n| where ResponseCode == '2'\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize Successes = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, SuccessCount_End = Successes, le = real(+inf);\r\nlet success = startSuccess\r\n| join (endSuccess) on Source, Namespace, Destination\r\n| project Source, Namespace, Destination, SuccessCount = SuccessCount_End - SuccessCount_Start;\r\nlet finalInventory = inventory\r\n| join kind=leftouter (failures) on Source, Namespace, Destination\r\n| join kind=leftouter (success) on Source, Namespace, Destination\r\n| extend SuccessCount = iif( isnull(SuccessCount), real(0), SuccessCount), FailureCount = iif( isnull(FailureCount), real(0), FailureCount)\r\n| project Source, Namespace, Destination, RqTotal, FailureRate = iif( RqTotal == 0, '-', strcat(round((FailureCount / RqTotal) * 100.0, 3), \"%\"));\r\nlet histo_max = materializedHisto\r\n| extend le = iif( isnull(toreal(le)), real(+inf), toreal(le))\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName, le\r\n| project Source, Namespace, Destination, PodName, le, ValueEnd = Val;\r\nlet histo_min = materializedHisto\r\n| extend le = iif( isnull(toreal(le)), real(+inf), toreal(le))\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName, le\r\n| project Source, Namespace, Destination, PodName, le, ValueStart = Val;\r\nlet hist_bin_project = histo_min\r\n| join (histo_max) on Source, Namespace, Destination, PodName, le\r\n| summarize ValueEnd = sum(ValueEnd), ValueStart = sum(ValueStart) by Source, Namespace, Destination, le\r\n| project Source, Namespace, Destination, le, RequestsAtLeLatency = ValueEnd - ValueStart;\r\nfinalInventory\r\n| join kind=leftouter(hist_bin_project) on Source, Namespace, Destination\r\n| extend le = iif(isnull(le), real(+inf), toreal(le)), RequestsAtLeLatency_Fixed = iif(isnull(RequestsAtLeLatency), real(0), toreal(RequestsAtLeLatency))\r\n| where RequestsAtLeLatency_Fixed >= (RqTotal * 0.9) or isnull(RequestsAtLeLatency)\r\n| summarize arg_min(le, *) by Source, Namespace, Destination\r\n| extend le = iif(RqTotal < 1, real(+inf), toreal(le))\r\n| project Destination, RqTotal, FailureRate, Latency = iif(le == real(+inf), '-', strcat(le, 'ms'))",
                    "size": 3,
                    "noDataMessage": "There was no observed HTTP(S) traffic during this time with these filters.  There were TCP/UDP connections, but no requests.",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "Time_Range",
                    "queryType": 0,
                    "resourceType": "{resourceType}",
                    "crossComponentResources": [
                      "{resource}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Destination",
                          "formatter": 7,
                          "formatOptions": {
                            "linkTarget": "WorkbookTemplate",
                            "workbookContext": {
                              "componentIdSource": "workbook",
                              "resourceIdsSource": "workbook",
                              "templateIdSource": "static",
                              "templateId": "Community-Workbooks/AKS/OSM Destination Metrics",
                              "typeSource": "workbook",
                              "gallerySource": "workbook",
                              "locationSource": "default",
                              "passSpecificParams": true,
                              "templateParameters": [
                                {
                                  "name": "SourceService",
                                  "source": "parameter",
                                  "value": "OsmNameRequests"
                                },
                                {
                                  "name": "DestinationService",
                                  "source": "cell",
                                  "value": ""
                                },
                                {
                                  "name": "resource",
                                  "source": "parameter",
                                  "value": "resource"
                                },
                                {
                                  "name": "TimeRange",
                                  "source": "parameter",
                                  "value": "Time_Range"
                                },
                                {
                                  "name": "envoyWhereClause",
                                  "source": "parameter",
                                  "value": "envoyWhereClause"
                                },
                                {
                                  "name": "FilterInternals",
                                  "source": "parameter",
                                  "value": "filterEnvoyInternals"
                                },
                                {
                                  "name": "resourceType",
                                  "source": "parameter",
                                  "value": "resourceType"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "RqTotal",
                          "formatter": 2
                        },
                        {
                          "columnMatch": "FailureRate",
                          "formatter": 2
                        },
                        {
                          "columnMatch": "Latency",
                          "formatter": 2
                        }
                      ],
                      "filter": true,
                      "sortBy": [
                        {
                          "itemKey": "RqTotal",
                          "sortOrder": 1
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "Destination",
                          "label": "Destination service"
                        },
                        {
                          "columnId": "RqTotal",
                          "label": "Total requests"
                        },
                        {
                          "columnId": "FailureRate",
                          "label": "Request error rate"
                        },
                        {
                          "columnId": "Latency",
                          "label": "Latency (P90)"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "RqTotal",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "name": "OsmNameRequest-Destinations-Grid"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "OsmNameRequests",
              "comparison": "isNotEqualTo"
            },
            "name": "OsmNameRequest-Destinations"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Requests"
      },
      "name": "OsmRequestsTab"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<div style=\"font-style: italic; margin-left: 2em\">Select a row below to start.</div>"
            },
            "name": "ConnectionsSelectMessageHeader",
            "styleSettings": {
              "margin": "15px 0 -70px 0px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let namespaceSelection = tostring('{Namespace}');\r\nlet materializedRqXX = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == \"envoy_cluster_upstream_rq_xx\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name), ResponseCode = tostring(parse_json(Tags).envoy_response_code_class)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet txUpstreamMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == \"envoy_cluster_upstream_cx_tx_bytes_total\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet rxUpstreamMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == \"envoy_cluster_upstream_cx_rx_bytes_total\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet cxTotalMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name contains \"envoy_cluster_upstream_cx_total\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet cxConnectFailedMaterialize = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name contains \"envoy_cluster_upstream_cx_connect_fail\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet cxConnectActiveMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name contains \"envoy_cluster_upstream_cx_active\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet txStart = txUpstreamMaterialized\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TxTotal_Start = sum(Val) by Source, Namespace\r\n| project Source, Namespace, TxTotal_Start;\r\nlet txEnd = txUpstreamMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TxTotal_End = sum(Val) by Source, Namespace\r\n| project Source, Namespace, TxTotal_End;\r\nlet tx = txStart\r\n| join (txEnd) on Source, Namespace\r\n| extend TxTotal = TxTotal_End - TxTotal_Start\r\n| extend TxTotal_units = tostring(TxTotal)\r\n| extend TxTotal_units = iif(TxTotal > 1024, strcat(round(TxTotal / 1024, 2), \"KB\"), TxTotal_units)\r\n| extend TxTotal_units = iif(TxTotal > 1048576, strcat(round(TxTotal / 1048576, 2), \"MB\"), TxTotal_units)\r\n| extend TxTotal_units = iif(TxTotal > 1073741824, strcat(round(TxTotal / 1073741824, 2), \"GB\"), TxTotal_units)\r\n| project Source, Namespace, TxTotal_units, TxTotal_Start, TxTotal_End;\r\nlet rxStart = rxUpstreamMaterialized\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize RxTotal_Start = sum(Val) by Source, Namespace\r\n| project Source, Namespace, RxTotal_Start;\r\nlet rxEnd = rxUpstreamMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize RxTotal_End = sum(Val) by Source, Namespace\r\n| project Source, Namespace, RxTotal_End;\r\nlet rx = rxStart\r\n| join (rxEnd) on Source, Namespace\r\n| extend RxTotal = RxTotal_End - RxTotal_Start\r\n| extend RxTotal_units = tostring(RxTotal)\r\n| extend RxTotal_units = iif(RxTotal > 1024, strcat(round(RxTotal / 1024, 2), \"KB\"), RxTotal_units)\r\n| extend RxTotal_units = iif(RxTotal > 1048576, strcat(round(RxTotal / 1048576, 2), \"MB\"), RxTotal_units)\r\n| extend RxTotal_units = iif(RxTotal > 1073741824, strcat(round(RxTotal / 1073741824, 2), \"GB\"), RxTotal_units)\r\n| project Source, Namespace, RxTotal_units, RxTotal_Start, RxTotal_End;\r\nlet connectionsStart = cxTotalMaterialized\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections = sum(Val) by Source, Namespace\r\n| project Source, Namespace, Outbound_connections_Start = TotalConnections;\r\nlet connectionsEnd = cxTotalMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections = sum(Val) by Source, Namespace\r\n| project Source, Namespace, Outbound_connections_End = TotalConnections;\r\nlet connections = connectionsStart\r\n| join (connectionsEnd) on Source, Namespace\r\n| project Source, Namespace, Outbound_connections = Outbound_connections_End - Outbound_connections_Start, Outbound_connections_Start, Outbound_connections_End;\r\nlet connectionsFailed_Start = cxConnectFailedMaterialize\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections_Start = sum(Val) by Source, Namespace\r\n| project Source, Namespace, Outbound_connections_failed_Start = TotalConnections_Start;\r\nlet connectionsFailed_End = cxConnectFailedMaterialize\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections_End = sum(Val) by Source, Namespace\r\n| project Source, Namespace, Outbound_connections_failed_End = TotalConnections_End;\r\nlet connectionsFailed = connectionsFailed_Start\r\n| join (connectionsFailed_End) on Source, Namespace\r\n| project Source, Namespace, Outbound_connections_failed = Outbound_connections_failed_End - Outbound_connections_failed_Start;\r\nlet activeConnections = cxConnectActiveMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalActiveConnections = sum(Val) by Source, Namespace\r\n| project Source, Namespace, TotalActiveConnections;\r\nlet inventoryStart = materializedRqXX\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize RqTlt = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal_Start = RqTlt, le = real(+inf);\r\nlet inventoryEnd =  materializedRqXX\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize RqTlt = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal_End = RqTlt, le = real(+inf);\r\nlet inventory = inventoryEnd\r\n| join (inventoryStart) on Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal = RqTotal_End - RqTotal_Start\r\n| where RqTotal > 0\r\n| summarize RqTotal = sum(RqTotal) by Source, Namespace\r\n| project SrcInv = Source, SrcNamespace = Namespace, RqTotal;\r\nconnections\r\n| join kind=leftouter (tx) on Source, Namespace\r\n| join kind=leftouter (rx) on Source, Namespace\r\n| join kind=leftouter (connectionsFailed) on Source, Namespace\r\n| join kind=leftouter (activeConnections) on Source, Namespace\r\n| where Outbound_connections + TotalActiveConnections > 0\r\n| join kind=fullouter (inventory) on $left.Source == $right.SrcInv, $left.Namespace == $right.SrcNamespace\r\n| extend \r\n    Source = iif(isempty(Source), SrcInv, Source), \r\n    Namespace = iif(isempty(Namespace), SrcNamespace, Namespace), \r\n    Outbound_connections = iif(isnull(Outbound_connections), real(0), Outbound_connections),\r\n    TotalActiveConnections = iif(isnull(TotalActiveConnections), real(0), TotalActiveConnections),\r\n    Outbound_connections_failed = iif(isnull(Outbound_connections_failed), real(0), Outbound_connections_failed),\r\n    TxTotal_units = iif(isempty(TxTotal_units), '0.0', strcat(TxTotal_units)),\r\n    RxTotal_units = iif(isempty(RxTotal_units), '0.0', strcat(RxTotal_units))\r\n| project Name = Source, Outbound_connections, TotalActiveConnections, Outbound_connections_failed, RqTotal, TxTotal_units, RxTotal_units",
              "size": 3,
              "timeContext": {
                "durationMs": 3600000
              },
              "timeContextFromParameter": "Time_Range",
              "exportedParameters": [
                {
                  "parameterType": 1
                },
                {
                  "fieldName": "Name",
                  "parameterName": "OsmNameConnections",
                  "parameterType": 1
                }
              ],
              "queryType": 0,
              "resourceType": "{resourceType}",
              "crossComponentResources": [
                "{resource}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Name",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "Outbound_connections",
                    "formatter": 2,
                    "tooltipFormat": {
                      "tooltip": "Total number of outbound connections across all destination services."
                    }
                  },
                  {
                    "columnMatch": "TotalActiveConnections",
                    "formatter": 2,
                    "tooltipFormat": {
                      "tooltip": "Sum of last active connection count across all the destination services."
                    }
                  },
                  {
                    "columnMatch": "Outbound_connections_failed",
                    "formatter": 2,
                    "tooltipFormat": {
                      "tooltip": "Total number of failed connections between source and destination service."
                    }
                  },
                  {
                    "columnMatch": "RqTotal",
                    "formatter": 2
                  },
                  {
                    "columnMatch": "TxTotal_units",
                    "formatter": 2
                  },
                  {
                    "columnMatch": "RxTotal_units",
                    "formatter": 2
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "Name",
                    "label": "Connection source"
                  },
                  {
                    "columnId": "Outbound_connections",
                    "label": "Outbound connections",
                    "comment": "Total number of outbound connections across all destination services."
                  },
                  {
                    "columnId": "TotalActiveConnections",
                    "label": "Outbound active connections",
                    "comment": "Sum of last active connection count across all the destination services."
                  },
                  {
                    "columnId": "Outbound_connections_failed",
                    "label": "Outbound Failed connection",
                    "comment": "Total number of failed connections between source and destination service."
                  },
                  {
                    "columnId": "RqTotal",
                    "label": "Http requests total"
                  },
                  {
                    "columnId": "TxTotal_units",
                    "label": "Outbound bytes sent"
                  },
                  {
                    "columnId": "RxTotal_units",
                    "label": "Outbound bytes received"
                  }
                ]
              },
              "sortBy": []
            },
            "name": "ConnectionsMainGrid"
          },
          {
            "type": 1,
            "content": {
              "json": "<div>\r\nTroubleshooting guidance when Outbound active connections is 0 or failed connection count is >10k. \r\n\r\n<ul>\r\n\t<li>\r\n\tPlease check your connection policy in OSM configuration. \r\n\t</li>\r\n\t<li>\r\n\tIf connection policy is fine, please refer the OSM documentation. https://aka.ms/osm/tsg \r\n\t</li>\r\n</ul>\r\n\r\n</div>"
            },
            "name": "text - 3"
          },
          {
            "type": 1,
            "content": {
              "json": "---"
            },
            "conditionalVisibility": {
              "parameterName": "OsmNameConnections",
              "comparison": "isNotEqualTo"
            },
            "name": "text - 4",
            "styleSettings": {
              "margin": "4em 0 2em 0"
            }
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "<div style=\"padding-top: 20px; padding-left: 20px; font-size: 24px\">\r\n\tSource Service:\r\n\t<span style=\"font-weight: bold\">\r\n\t\t{OsmNameConnections}\r\n\t</span>\r\n</div>",
                    "style": "{OsmName}"
                  },
                  "name": "OsmNameConnections-Destinations-Header"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let sourceName = '{OsmNameConnections}';\r\nlet namespaceSelection = tostring('{Namespace}');\r\nlet materializedRqXX = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == \"envoy_cluster_upstream_rq_xx\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name), ResponseCode = tostring(parse_json(Tags).envoy_response_code_class)\r\n        | where Source == sourceName\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet txUpstreamMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == \"envoy_cluster_upstream_cx_tx_bytes_total\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Source == sourceName\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet rxUpstreamMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name == \"envoy_cluster_upstream_cx_rx_bytes_total\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Source == sourceName\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet cxTotalMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name contains \"envoy_cluster_upstream_cx_total\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Source == sourceName\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet cxConnectFailedMaterialize = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name contains \"envoy_cluster_upstream_cx_connect_fail\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Source == sourceName\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet cxConnectActiveMaterialized = materialize(\r\n    InsightsMetrics\r\n        | extend ClusterId = _ResourceId\r\n        {clusterIdWhereClause}\r\n        | where Name contains \"envoy_cluster_upstream_cx_active\"\r\n        | extend Source = tostring(parse_json(Tags).app), Namespace = tostring(parse_json(Tags).namespace), Destination = tostring(parse_json(Tags).envoy_cluster_name), PodName = tostring(parse_json(Tags).pod_name)\r\n        | where Source == sourceName\r\n        | where Namespace contains iif(namespaceSelection == '<All>', '', namespaceSelection)\r\n        {envoyWhereClause}\r\n);\r\nlet txStart = txUpstreamMaterialized\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TxTotal_Start = sum(Val) by Source, Namespace, Destination\r\n| project Source, Destination, Namespace, TxTotal_Start;\r\nlet txEnd = txUpstreamMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TxTotal_End = sum(Val) by Source, Namespace, Destination\r\n| project Source, Destination, Namespace, TxTotal_End;\r\nlet tx = txStart\r\n| join (txEnd) on Source, Destination, Namespace\r\n| extend TxTotal = TxTotal_End - TxTotal_Start\r\n| extend TxTotal_units = tostring(TxTotal)\r\n| extend TxTotal_units = iif(TxTotal > 1024, strcat(round(TxTotal / 1024, 2), \"KB\"), TxTotal_units)\r\n| extend TxTotal_units = iif(TxTotal > 1048576, strcat(round(TxTotal / 1048576, 2), \"MB\"), TxTotal_units)\r\n| extend TxTotal_units = iif(TxTotal > 1073741824, strcat(round(TxTotal / 1073741824, 2), \"GB\"), TxTotal_units)\r\n| project Source, Destination, Namespace, TxTotal_units, TxTotal_Start, TxTotal_End;\r\nlet rxStart = rxUpstreamMaterialized\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize RxTotal_Start = sum(Val) by Source, Namespace, Destination\r\n| project Source, Destination, Namespace, RxTotal_Start;\r\nlet rxEnd = rxUpstreamMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize RxTotal_End = sum(Val) by Source, Namespace, Destination\r\n| project Source, Destination, Namespace, RxTotal_End;\r\nlet rx = rxStart\r\n| join (rxEnd) on Source, Destination, Namespace\r\n| extend RxTotal = RxTotal_End - RxTotal_Start\r\n| extend RxTotal_units = tostring(RxTotal)\r\n| extend RxTotal_units = iif(RxTotal > 1024, strcat(round(RxTotal / 1024, 2), \"KB\"), RxTotal_units)\r\n| extend RxTotal_units = iif(RxTotal > 1048576, strcat(round(RxTotal / 1048576, 2), \"MB\"), RxTotal_units)\r\n| extend RxTotal_units = iif(RxTotal > 1073741824, strcat(round(RxTotal / 1073741824, 2), \"GB\"), RxTotal_units)\r\n| project Source, Destination, Namespace, RxTotal_units, RxTotal_Start, RxTotal_End;\r\nlet connectionsStart = cxTotalMaterialized\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections = sum(Val) by Source, Namespace, Destination\r\n| project Source, Destination, Namespace, Outbound_connections_Start = TotalConnections;\r\nlet connectionsEnd = cxTotalMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections = sum(Val) by Source, Namespace, Destination\r\n| project Source, Destination, Namespace, Outbound_connections_End = TotalConnections;\r\nlet connections = connectionsStart\r\n| join (connectionsEnd) on Source, Destination, Namespace, Destination\r\n| project Source, Destination, Namespace, Outbound_connections = Outbound_connections_End - Outbound_connections_Start, Outbound_connections_Start, Outbound_connections_End;\r\nlet connectionsFailed_Start = cxConnectFailedMaterialize\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections_Start = sum(Val) by Source, Namespace, Destination\r\n| project Source, Destination, Namespace, Outbound_connections_failed_Start = TotalConnections_Start;\r\nlet connectionsFailed_End = cxConnectFailedMaterialize\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalConnections_End = sum(Val) by Source, Namespace, Destination\r\n| project Source, Destination, Namespace, Outbound_connections_failed_End = TotalConnections_End;\r\nlet connectionsFailed = connectionsFailed_Start\r\n| join (connectionsFailed_End) on Source, Destination, Namespace\r\n| project Source, Destination, Namespace, Outbound_connections_failed = Outbound_connections_failed_End - Outbound_connections_failed_Start;\r\nlet activeConnections = cxConnectActiveMaterialized\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName\r\n| summarize TotalActiveConnections = sum(Val) by Source, Namespace, Destination\r\n| project Source, Destination, Namespace, TotalActiveConnections;\r\nlet inventoryStart = materializedRqXX\r\n| summarize arg_min(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize RqTlt = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal_Start = RqTlt, le = real(+inf);\r\nlet inventoryEnd =  materializedRqXX\r\n| summarize arg_max(TimeGenerated, *) by Source, Namespace, Destination, PodName, ResponseCode\r\n| summarize RqTlt = sum(Val) by Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal_End = RqTlt, le = real(+inf);\r\nlet inventory = inventoryEnd\r\n| join (inventoryStart) on Source, Namespace, Destination\r\n| project Source, Namespace, Destination, RqTotal = RqTotal_End - RqTotal_Start\r\n| where RqTotal > 0\r\n| project SrcInv = Source, SrcNamespace = Namespace, SrcDestination = Destination, RqTotal;\r\nconnections\r\n| join kind=leftouter (tx) on Source, Namespace, Destination\r\n| join kind=leftouter (rx) on Source, Namespace, Destination\r\n| join kind=leftouter (connectionsFailed) on Source, Destination, Namespace\r\n| join kind=leftouter (activeConnections) on Source, Destination, Namespace\r\n| where Outbound_connections + TotalActiveConnections > 0\r\n| join kind=fullouter (inventory) on $left.Source == $right.SrcInv, $left.Destination == $right.SrcDestination, $left.Namespace == $right.SrcNamespace\r\n| extend \r\n    Source = iif(isempty(Source), SrcInv, Source), \r\n    Namespace = iif(isempty(Namespace), SrcNamespace, Namespace), \r\n    Destination = iif(isempty(Destination), SrcDestination, Destination), \r\n    Outbound_connections = iif(isnull(Outbound_connections), real(0), Outbound_connections),\r\n    TotalActiveConnections = iif(isnull(TotalActiveConnections), real(0), TotalActiveConnections),\r\n    Outbound_connections_failed = iif(isnull(Outbound_connections_failed), real(0), Outbound_connections_failed),\r\n    TxTotal_units = iif(isempty(TxTotal_units), '0.0', strcat(TxTotal_units)),\r\n    RxTotal_units = iif(isempty(RxTotal_units), '0.0', strcat(RxTotal_units))\r\n| project Name = Destination, Outbound_connections, TotalActiveConnections, Outbound_connections_failed, RqTotal, TxTotal_units, RxTotal_units",
                    "size": 3,
                    "noDataMessage": "There was no observed HTTP(S) traffic during this time with these filters.  There were TCP/UDP connections, but no requests.",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "timeContextFromParameter": "Time_Range",
                    "queryType": 0,
                    "resourceType": "{resourceType}",
                    "crossComponentResources": [
                      "{resource}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Name",
                          "formatter": 7,
                          "formatOptions": {
                            "linkTarget": "WorkbookTemplate",
                            "workbookContext": {
                              "componentIdSource": "workbook",
                              "resourceIdsSource": "workbook",
                              "templateIdSource": "static",
                              "templateId": "Community-Workbooks/AKS/OSM Destination Metrics",
                              "typeSource": "workbook",
                              "gallerySource": "workbook",
                              "locationSource": "default",
                              "passSpecificParams": true,
                              "templateParameters": [
                                {
                                  "name": "SourceService",
                                  "source": "parameter",
                                  "value": "OsmNameConnections"
                                },
                                {
                                  "name": "DestinationService",
                                  "source": "cell",
                                  "value": ""
                                },
                                {
                                  "name": "resource",
                                  "source": "parameter",
                                  "value": "resource"
                                },
                                {
                                  "name": "TimeRange",
                                  "source": "parameter",
                                  "value": "Time_Range"
                                },
                                {
                                  "name": "envoyWhereClause",
                                  "source": "parameter",
                                  "value": "envoyWhereClause"
                                },
                                {
                                  "name": "FilterInternals",
                                  "source": "parameter",
                                  "value": "filterEnvoyInternals"
                                },
                                {
                                  "name": "resourceType",
                                  "source": "parameter",
                                  "value": "resourceType"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "Outbound_connections",
                          "formatter": 2,
                          "tooltipFormat": {
                            "tooltip": "Total number of connections between Source and destination services."
                          }
                        },
                        {
                          "columnMatch": "TotalActiveConnections",
                          "formatter": 2,
                          "tooltipFormat": {
                            "tooltip": "Sum of last active connection count between source and destination in selected time range."
                          }
                        },
                        {
                          "columnMatch": "Outbound_connections_failed",
                          "formatter": 2,
                          "tooltipFormat": {
                            "tooltip": "Total number of failed connections between source and destination service."
                          }
                        },
                        {
                          "columnMatch": "RqTotal",
                          "formatter": 2
                        },
                        {
                          "columnMatch": "TxTotal_units",
                          "formatter": 2
                        },
                        {
                          "columnMatch": "RxTotal_units",
                          "formatter": 2
                        }
                      ],
                      "filter": true,
                      "sortBy": [
                        {
                          "itemKey": "TxTotal_units",
                          "sortOrder": 1
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "Name",
                          "label": "Destination"
                        },
                        {
                          "columnId": "Outbound_connections",
                          "label": "Outbound connections",
                          "comment": "Total number of connections between Source and destination services."
                        },
                        {
                          "columnId": "TotalActiveConnections",
                          "label": "Outboound active connections",
                          "comment": "Sum of last active connection count between source and destination in selected time range."
                        },
                        {
                          "columnId": "Outbound_connections_failed",
                          "label": "Outbound failed connections",
                          "comment": "Total number of failed connections between source and destination service."
                        },
                        {
                          "columnId": "RqTotal",
                          "label": "Http requests total"
                        },
                        {
                          "columnId": "TxTotal_units",
                          "label": "Outbound bytes sent"
                        },
                        {
                          "columnId": "RxTotal_units",
                          "label": "Outbound bytes received"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "TxTotal_units",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "name": "OsmNameConnections-Destinations-Grid"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "OsmNameConnections",
              "comparison": "isNotEqualTo"
            },
            "name": "OsmNameConnections-Destinations"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "TabName",
        "comparison": "isEqualTo",
        "value": "Connections"
      },
      "name": "OmsConnectionsTab"
    }
  ],
  "styleSettings": {
    "spacingStyle": "narrow"
  },
  "$schema": "https://github.com/woodyard/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
